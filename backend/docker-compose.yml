# backend/docker-compose.yml

services:
  redis:
    image: redis:6.2-alpine
    container_name: cv_redis
    ports:
      - "6379:6379"
    volumes:
     - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nexona_network

  db:
    image: postgres:14-alpine
    container_name: cv_postgres_db
    environment:
      POSTGRES_DB: cv_manager_db
      POSTGRES_USER: cv_manager_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Reads from .env file
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cv_manager_user -d cv_manager_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nexona_network

  web:
    build: .
    container_name: cv_web_app
    ports:
      - "5001:5000"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - PYTHONDONTWRITEBYTECODE=1 # Good for development
      - FLASK_APP=run.py # Or your main Flask app file
      # FLASK_ENV should be in .env, e.g., FLASK_ENV=development
      - PYTHONUNBUFFERED=1 # Ensures logs appear immediately
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: flask run --host=0.0.0.0 --port=5000
    networks:
      - nexona_network

  worker:
    build: .
    container_name: cv_celery_worker
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app # Crucial for Celery to find tasks
      - PYTHONUNBUFFERED=1
      # Ensure all necessary env vars for create_app are available from .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web: # Optional: worker might start after web, or at least ensure web's image is built
        condition: service_started
    command: celery -A celery_worker.celery worker --loglevel=INFO -P prefork -c 4 # Example: concurrency 4
    networks:
      - nexona_network

  beat:
    build: .
    container_name: cv_celery_beat
    volumes:
      - .:/app
      - celerybeat_schedule_data:/app/celerybeat # Persist schedule file inside /app/celerybeat dir
    env_file:
        - .env
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      web: # Optional dependency
        condition: service_started
    # --- CORRECTED COMMAND ---
    # -s /app/celerybeat/celerybeat-schedule: specifies where the schedule file is stored
    command: celery -A celery_worker.celery beat --loglevel=INFO -s /app/celerybeat/celerybeat-schedule
    # ----------------------------------------------------
    networks:
      - nexona_network

volumes:
  postgres_data:
  redis_data:
  celerybeat_schedule_data: {} # Declare the named volume for beat schedule

networks:
  nexona_network:
    driver: bridge